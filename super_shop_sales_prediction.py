# -*- coding: utf-8 -*-
"""super_shop_sales_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e73JkCP6OzJmfn4HOPbjhkdbXOJdJs5S
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

super_shop_data = pd.read_csv('/content/Train.csv')

#Print first 10 row data frme
super_shop_data.head(10)

# Data point and  Features  number
super_shop_data.shape

#Information About dataset
super_shop_data.info()

#Print Mising values
super_shop_data.isnull().sum()

"""Missing Values Handling for Item_Weight"""

# Mean value Item_Weight Colum
super_shop_data['Item_Weight'].mean()

super_shop_data['Item_Weight'] = super_shop_data['Item_Weight'].fillna(super_shop_data['Item_Weight'].mean())

#Print Mising values
super_shop_data.isnull().sum()

"""Missing Values Handling for Outlet_Size"""

mode_of_outlet_size = super_shop_data.pivot_table(values='Outlet_Size', columns='Outlet_Type', aggfunc=(lambda x: x.mode()[0]))
print(mode_of_outlet_size)

miss_values = super_shop_data['Outlet_Size'].isnull()

print(miss_values)

super_shop_data.loc[miss_values, 'Outlet_Size'] = super_shop_data.loc[miss_values,'Outlet_Type'].apply(lambda x: mode_of_outlet_size[x])

#chk mising value
super_shop_data.isnull().sum()

"""Data-Analysis"""

super_shop_data.describe()

# Numerical Features
sns.set()

# Item Item_Weight distribution
plt.figure(figsize=(6,6))
sns.histplot(data= super_shop_data, x='Item_Weight', kde=True, color='blue')
plt.show()

# Item Visibility distribution
plt.figure(figsize=(6,6))
sns.histplot(super_shop_data['Item_Visibility'])
plt.show()

# Item_MRP distribution
plt.figure(figsize=(6,6))
sns.histplot(super_shop_data['Item_MRP'])
plt.show()

# Item_Outlet_Sales distribution
plt.figure(figsize=(6,6))
sns.histplot(super_shop_data['Item_Outlet_Sales'])
plt.show()

# Outlet_Establishment_Year column
plt.figure(figsize=(5,5))
sns.countplot(x='Outlet_Establishment_Year', data= super_shop_data)
plt.show()

# Categorical Features
# Item_Fat_Content column
plt.figure(figsize=(5,5))
sns.countplot(x='Item_Fat_Content', data=super_shop_data)
plt.show()

# Item_Type column
plt.figure(figsize=(30,6))
sns.countplot(x='Item_Type', data=super_shop_data)
plt.show()

# Outlet_Size column
plt.figure(figsize=(5,5))
sns.countplot(x='Outlet_Size', data=super_shop_data)
plt.show()

#Data Pre Prpcessing
super_shop_data.head()

super_shop_data['Item_Fat_Content'].value_counts()

super_shop_data.replace({'Item_Fat_Content': {'low fat':'Low Fat','LF':'Low Fat', 'reg':'Regular'}}, inplace=True)

super_shop_data['Item_Fat_Content'].value_counts()

"""Label Encoding"""

encoder = LabelEncoder()

super_shop_data['Item_Identifier'] = encoder.fit_transform(super_shop_data['Item_Identifier'])

super_shop_data['Item_Fat_Content'] = encoder.fit_transform(super_shop_data['Item_Fat_Content'])

super_shop_data['Item_Type'] = encoder.fit_transform(super_shop_data['Item_Type'])

super_shop_data['Outlet_Identifier'] = encoder.fit_transform(super_shop_data['Outlet_Identifier'])

super_shop_data['Outlet_Size'] = encoder.fit_transform(super_shop_data['Outlet_Size'])

super_shop_data['Outlet_Location_Type'] = encoder.fit_transform(super_shop_data['Outlet_Location_Type'])

super_shop_data['Outlet_Type'] = encoder.fit_transform(super_shop_data['Outlet_Type'])

super_shop_data.head()

"""Splitting features and Target"""

X = super_shop_data.drop(columns='Item_Outlet_Sales', axis=1)
Y = super_shop_data['Item_Outlet_Sales']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Machine Learning Model Training"""

regressor = XGBRegressor()

regressor.fit(X_train, Y_train)

"""Evaluation"""

# prediction on training data
training_data_prediction = regressor.predict(X_train)

# R squared Value
r2_train = metrics.r2_score(Y_train, training_data_prediction)

print('R Squared value = ', r2_train)

# prediction on test data
test_data_prediction = regressor.predict(X_test)

# R squared Value
r2_test = metrics.r2_score(Y_test, test_data_prediction)

print('R Squared value = ', r2_test)